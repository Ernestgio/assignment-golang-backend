// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	dto "assignment-golang-backend/dto"
	entity "assignment-golang-backend/entity"

	mock "github.com/stretchr/testify/mock"
)

// WalletUsecase is an autogenerated mock type for the WalletUsecase type
type WalletUsecase struct {
	mock.Mock
}

// GetWalletById provides a mock function with given fields: id
func (_m *WalletUsecase) GetWalletById(id int) (*entity.Wallet, error) {
	ret := _m.Called(id)

	var r0 *entity.Wallet
	if rf, ok := ret.Get(0).(func(int) *entity.Wallet); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Wallet)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Topup provides a mock function with given fields: walletId, topUpAmt, sourceOfFundId
func (_m *WalletUsecase) Topup(walletId int, topUpAmt int, sourceOfFundId int) (*dto.TopUpResponseDto, error) {
	ret := _m.Called(walletId, topUpAmt, sourceOfFundId)

	var r0 *dto.TopUpResponseDto
	if rf, ok := ret.Get(0).(func(int, int, int) *dto.TopUpResponseDto); ok {
		r0 = rf(walletId, topUpAmt, sourceOfFundId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.TopUpResponseDto)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int, int) error); ok {
		r1 = rf(walletId, topUpAmt, sourceOfFundId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Transfer provides a mock function with given fields: sourceWalletId, transferDto
func (_m *WalletUsecase) Transfer(sourceWalletId int, transferDto *dto.TransferDto) (*dto.TransferDto, error) {
	ret := _m.Called(sourceWalletId, transferDto)

	var r0 *dto.TransferDto
	if rf, ok := ret.Get(0).(func(int, *dto.TransferDto) *dto.TransferDto); ok {
		r0 = rf(sourceWalletId, transferDto)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.TransferDto)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, *dto.TransferDto) error); ok {
		r1 = rf(sourceWalletId, transferDto)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewWalletUsecase interface {
	mock.TestingT
	Cleanup(func())
}

// NewWalletUsecase creates a new instance of WalletUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewWalletUsecase(t mockConstructorTestingTNewWalletUsecase) *WalletUsecase {
	mock := &WalletUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
